// Jenkinsfile for ParksMap

//Build the source code, using Nexus as a Maven proxy cache
//Execute the following tests in parallel and present the results in the build log:
//Unit tests
//Code coverage tests
//Tag the image with the version and build number
//Upload the generated artifact to the artifact repository
//Run an integration test if the service built was a back-end service
//Upload the tested container image to another (Nexus) Docker registry

podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-maven-centos7",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `ParksMap`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance


    def mvnCmd = "mvn -s ./nexus_settings.xml -f ./ParksMap"

  // Checkout Source Code.
  stage('Checkout Source') {
  git credentialsId: '4df7f017-d47e-4057-a95c-33ff64249e80', url: 'https://github.com/honghuac/ocpadvdevhw.git'
  }



    // The following variables need to be defined at the top level
    // and not inside the scope of a stage - otherwise they would not
    // be accessible from other stages.
    // Extract version and other properties from the pom.xml
    def groupId    = getGroupIdFromPom("./ParksMap/pom.xml")
    def artifactId = getArtifactIdFromPom("./ParksMap/pom.xml")
    def version    = getVersionFromPom("./ParksMap/pom.xml")

    // Set the tag for the development image: version + build number
    def devTag  = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"

    // Using Maven build the war file
    // Do not run tests in this step
    stage('Build jar') {
      echo "Building version ${version}"
    sh "cd ParksMap"
    sh "${mvnCmd} clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
      echo "Running Unit Tests"
    sh "${mvnCmd} test"
    }

    // Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
      echo "Running Code Analysis"
    sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER}/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
    }

    // Publish the built war file to Nexus
    stage('Publish to Nexus') {
      echo "Publish to Nexus"
  sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
    }

    // Build the OpenShift Image in OpenShift and tag it.
    stage('Build and Tag OpenShift Image') {
      echo "Building OpenShift container image parksmap:${devTag}"
      sh "oc start-build parksmap --follow --from-file=./ParksMap/target/parksmap.jar -n ${GUID}-parks-dev"

    // OR use the file you just published into Nexus:
    // sh "oc start-build parksmap --follow --from-file=http://nexus3-${GUID}-nexus.apps.${CLUSTER}:8081/repository/releases/${version}/parksmap-${version}.jar -n ${GUID}-parks-dev"

    // Tag the image using the devTag
    openshiftTag alias: 'false', destStream: 'parksmap', destTag: devTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'parksmap', srcTag: 'latest', verbose: 'false'
    }

    // Deploy the built image to the Development Environment.
    stage('Deploy to Dev') {
      echo "Deploying container image to Development Project"
    // Update the Image on the Development Deployment Config
    sh "oc set image dc/parksmap parksmap=docker-registry.default.svc:5000/${GUID}-parks-dev/parksmap:${devTag} -n ${GUID}-parks-dev"

    // Update the Config Map which contains the AppName variable
    //sh "oc delete configmap parksmap-config -n ${GUID}-parks-dev --ignore-not-found=true"
    //sh "oc create configmap parksmap-config --from-file=../Infrastructure/templates/setup_dev/parksmap.properties -n ${GUID}-parks-dev"

    // Deploy the development application.
    openshiftDeploy depCfg: 'parksmap', namespace: '${GUID}-parks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyDeployment depCfg: 'parksmap', namespace: '${GUID}-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: '${GUID}-parks-dev', svcName: 'parksmap', verbose: 'false'
    }

    // Run Integration Tests in the Development Environment.
    stage('Integration Tests') {
      echo "Running Integration Tests"

  // List backend
  echo "Curl test 1"
  //sh "curl -i -u 'parksmap:redhat1' -H 'Content-Length: 0' -X POST http://parksmap.${GUID}-parks-dev.svc.cluster.local:8080/ws/parksmap/integration_test_1"

  sh "curl -i -u 'parksmap:redhat1' -H 'Content-Length: 0' -X POST http://nationalparks.${GUID}-parks-dev.svc.cluster.local:8080/ws/backends/list/"

  // Return Application Name
  echo "Curl test 2"
  //sh "curl -i -u 'parksmap:redhat1' -H 'Content-Length: 0' -X GET http://parksmap.${GUID}-parks-dev.svc.cluster.local:8080/ws/parksmap/1"

  sh "curl -i -u 'parksmap:redhat1' -H 'Content-Length: 0' -X POST http://nationalparks.${GUID}-parks-dev.svc.cluster.local:8080/ws/appname/"

    }

    // Copy Image to Nexus Docker Registry
    stage('Copy Image to Nexus Docker Registry') {
      echo "Copy image to Nexus Docker Registry"
  sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/parksmap:${devTag} docker://docker-registry.${GUID}-nexus.svc.cluster.local:5000/parksmap:${devTag}"

    // Tag the built image with the production tag.

    openshiftTag alias: 'false', destStream: 'parksmap', destTag: prodTag, destinationNamespace: '${GUID}-parks-prod', namespace: '${GUID}-parks-dev', srcStream: 'parksmap', srcTag: devTag, verbose: 'false'
    }

    // Blue/Green Deployment into Production
    // -------------------------------------
    // Do not activate the new version yet.
    def destApp   = "parksmap-green"
    def activeApp = ""

  stage('Blue/Green Production Deployment') {
    activeApp = sh(returnStdout: true, script: "oc get route parksmap -n ${GUID}-parks-prod -o jsonpath='{ .spec.to.name }'").trim()
    if (activeApp == "parksmap-green") {
      destApp = "parksmap-blue"
    }
    echo "Active Application:      " + activeApp
    echo "Destination Application: " + destApp

    // Update the Image on the Production Deployment Config
    sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-prod/parksmap:${prodTag} -n ${GUID}-parks-prod"

    // Update the Config Map which contains the users for the application
    //sh "oc delete configmap ${destApp}-config -n ${GUID}-parks-prod --ignore-not-found=true"
    //sh "oc create configmap ${destApp}-config --from-file=./Infrastructure/templates/setup_dev/parksmap.properties -n ${GUID}-parks-prod"
    // THIS IS OUTDATED: sh "oc set volume dc/parksmap-green --add --name=jboss-config --mount-path=/opt/eap/standalone/configuration/application-users.properties --sub-path=application-users.properties -n ${GUID}-parks-prod"

    // Deploy the inactive application.
    openshiftDeploy depCfg: destApp, namespace: '${GUID}-parks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyDeployment depCfg: destApp, namespace: '${GUID}-parks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: '${GUID}-parks-prod', svcName: destApp, verbose: 'false'
    }



//    stage('Switch to New Version') {
//        input "Switch production to new version?"
//        sh "oc patch route ${JOB_BASE_NAME} -n ${GUID}-parks-prod -p '{\"spec\":{\"to\":{\"name\":\"${destApp}\"}}}'"

      //echo "Switching Production application to ${destApp}."

//        if (activeApp != "") {
//            sh "oc patch svc ${activeApp} -n ${GUID}-parks-prod -p '{\"metadata\":{\"labels\":{\"type\":\"parksmap-inactive\"}}}'"
//        }
//        sh "oc patch svc ${destApp} -n ${GUID}-parks-prod -p '{\"metadata\":{\"labels\":{\"type\":\"parksmap-backend\"}}}'"
//    }

//    THIS IS OUTDATED: sh 'oc patch route parksmap-blue -n ${GUID}-parks-prod -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''


  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
