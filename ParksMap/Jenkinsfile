// Jenkinsfile for ParksMap
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `ParksMap`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance


    def mvnCmd = "mvn -s ./nexus_settings.xml"

  // Checkout Source Code.
  stage('Checkout Source') {
  git credentialsId: '4df7f017-d47e-4057-a95c-33ff64249e80', url: 'https://github.com/honghuac/ocpadvdevhw.git'
  }

  sh "oc policy add-role-to-user view --serviceaccount=default"

  sh "oc new-build --binary=true --name=parksmap-binary --image-stream=redhat-openjdk18-openshift:1.2"

  sh "oc start-build parksmap-binary --from-file=$HOME/ocpadvdevhw/ParksMap/target/parksmap.jar --follow"

  sh "oc new-app parksmap-binary"

  sh" oc expose svc/parksmap-binary --labels='type=parksmap-backend'"

  sh "curl -i -v -k `echo "https://"$(oc get route/parksmap-binary -o template --template {{.spec.host}})"/ws/backends/list"`

  sh "curl -i -v -k `echo "https://"$(oc get route/parksmap-binary -o template --template {{.spec.host}})"/ws/appname"`

    // The following variables need to be defined at the top level
    // and not inside the scope of a stage - otherwise they would not
    // be accessible from other stages.
    // Extract version and other properties from the pom.xml
    def groupId    = getGroupIdFromPom("pom.xml")
    def artifactId = getArtifactIdFromPom("pom.xml")
    def version    = getVersionFromPom("pom.xml")

    // Set the tag for the development image: version + build number
    def devTag  = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image: version
    def prodTag = "${version}"

    // Using Maven build the war file
    // Do not run tests in this step
    stage('Build war') {
      echo "Building version ${version}"
    sh "${mvnCmd} clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga"
    }

    // Using Maven run the unit tests
    stage('Unit Tests') {
      echo "Running Unit Tests"
    sh "${mvnCmd} test"
    }

    // Using Maven call SonarQube for Code Analysis
    stage('Code Analysis') {
      echo "Running Code Analysis"
    sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-hhc-sonarqube.apps.8cb3.openshift.opentlc.com/ -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
    }

    // Publish the built war file to Nexus
    stage('Publish to Nexus') {
      echo "Publish to Nexus"
  sh "${mvnCmd} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.hhc-nexus.svc.cluster.local:8081/repository/releases"
    }

    // Build the OpenShift Image in OpenShift and tag it.
    stage('Build and Tag OpenShift Image') {
      echo "Building OpenShift container image tasks:${devTag}"
      sh "oc start-build tasks --follow --from-file=./target/openshift-tasks.war -n hhc-tasks-dev"

    // OR use the file you just published into Nexus:
    // sh "oc start-build tasks --follow --from-file=http://nexus3.xyz-nexus.svc.cluster.local:8081/repository/releases/org/jboss/quickstarts/eap/tasks/${version}/tasks-${version}.war -n xyz-tasks-dev"

    // Tag the image using the devTag
    openshiftTag alias: 'false', destStream: 'tasks', destTag: devTag, destinationNamespace: 'hhc-tasks-dev', namespace: 'hhc-tasks-dev', srcStream: 'tasks', srcTag: 'latest', verbose: 'false'
    }

    // Deploy the built image to the Development Environment.
    stage('Deploy to Dev') {
      echo "Deploying container image to Development Project"
    // Update the Image on the Development Deployment Config
    sh "oc set image dc/tasks tasks=docker-registry.default.svc:5000/hhc-tasks-dev/tasks:${devTag} -n hhc-tasks-dev"

    // Update the Config Map which contains the users for the Tasks application
    sh "oc delete configmap tasks-config -n hhc-tasks-dev --ignore-not-found=true"
    sh "oc create configmap tasks-config --from-file=./configuration/application-users.properties --from-file=./configuration/application-roles.properties -n hhc-tasks-dev"

    // Deploy the development application.
    // Replace xyz-tasks-dev with the name of your production project
    openshiftDeploy depCfg: 'tasks', namespace: 'hhc-tasks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyDeployment depCfg: 'tasks', namespace: 'hhc-tasks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: 'hhc-tasks-dev', svcName: 'tasks', verbose: 'false'
    }

    // Run Integration Tests in the Development Environment.
    stage('Integration Tests') {
      echo "Running Integration Tests"
      sleep 15
  // Create a new task called "integration_test_1"
  echo "Creating task"
  sh "curl -i -u 'tasks:redhat1' -H 'Content-Length: 0' -X POST http://tasks.hhc-tasks-dev.svc.cluster.local:8080/ws/tasks/integration_test_1"

  // Retrieve task with id "1"
  echo "Retrieving tasks"
  sh "curl -i -u 'tasks:redhat1' -H 'Content-Length: 0' -X GET http://tasks.hhc-tasks-dev.svc.cluster.local:8080/ws/tasks/1"

  // Delete task with id "1"
  echo "Deleting tasks"
  sh "curl -i -u 'tasks:redhat1' -H 'Content-Length: 0' -X DELETE http://tasks.hhc-tasks-dev.svc.cluster.local:8080/ws/tasks/1"
    }

    sh "cd $HOME"

    sh "git clone https://github.com/honghuac/ocpadvdevhw"

    sh "mvn -s ../nexus_settings.xml clean package spring-boot:repackage -DskipTests -Dcom.redhat.xpaas.repo.redhatga"

    sh "oc policy add-role-to-user view --serviceaccount=default"

    sh "oc new-build --binary=true --name=parksmap-binary --image-stream=redhat-openjdk18-openshift:1.2"

    sh "oc start-build parksmap-binary --from-file=$HOME/ocpadvdevhw/ParksMap/target/parksmap.jar --follow"

    sh "oc new-app parksmap-binary"

    sh" oc expose svc/parksmap-binary --labels='type=parksmap-backend'"

    sh "curl -i -v -k `echo "https://"$(oc get route/parksmap-binary -o template --template {{.spec.host}})"/ws/backends/list"`

    sh "curl -i -v -k `echo "https://"$(oc get route/parksmap-binary -o template --template {{.spec.host}})"/ws/appname"`
  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
